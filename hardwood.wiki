== hardwood

Erlang style concurrency for CHICKEN Scheme, heavily inspired by
termite.

'''All the Termite API is currently not implemented and probably never
will. Also, some incompatibilities are to be expected.'''

[[toc:]]

== Requirements

* [[matchable]]
* [[uuid]]

== Bugs and Limitations

* There is currently no support for nodes
* There is currently no standard way to know if a proccess died (like links and monitors)

== Source code

The code is available in a [[http://hg.upyum.com/hardwood|mercurial
repository]]

You can clone it with:
 hg clone http://hg.upyum.com/hardwood

== Author

Adrien Ramos, heavily inspired by the Termite project of Guillaume
Germain.

== Documentation

=== Notes

{{TIMEOUT}} in the following definitions can be (as per srfi-18) either
of the following:

* an srfi-18 time object, which represents an absolute point in time
* a number, which represents a relative time in seconds
* #f for no timeout

If {{DEFAULT}} is specified when {{TIMEOUT}} is, it is returned in case
of timeout. Otherwise {{timeout-condition}} is signaled.

=== Constants

==== timeout-condition

Condition object raised when a timeout is reached.

=== Predicates

==== timeout-condition?

<procedure>(timeout-condition? OBJ)</procedure>

Whether {{OBJ}} is {{timeout-condition}} or not.

==== pid?

<procedure>(pid? OBJ)</procedure>

Whether {{OBJ}} is a {{pid}} object or not.

=== Fundamental Operations

==== spawn

<procedure>(spawn THUNK)</procedure>

Create a process running {{thunk}} and returns its {{pid}}.

==== self

<procedure>(self)</procedure>

Return the current process' {{pid}}.

==== setup-thread

<procedure>(setup-thread THREAD)</procedure>

{{Thread}} must be a srfi-18 thread.

Make {{thread}} a hardwood process.

==== !

<procedure>(! PID MSG)</procedure>

Send {{msg}} to process {{pid}}.

==== ?

<syntax>(? [TIMEOUT [DEFAULT]])</syntax>

Fetch the first message from the mailbox.

==== ??

<procedure>(?? PRED [TIMEOUT [DEFAULT]])</procedure>

Fetch the next message that matches {{pred}}.

==== make-tag

<procedure>(make-tag)</procedure>

Return a new {{tag}}.

Tags are guaranteed to be universally unique.

==== !?

<procedure>(!? PID MSG [TIMEOUT [DEFAULT]])</procedure>

Send {{msg}} to process {{pid}} and wait for a reply.

The actual message sent to {{pid}} is (list (self) tag {{msg}}).

This procedure wait for a reply of the form (list tag {{reply}}) and
returns {{reply}}.

==== recv

<syntax>(recv PAT [...] [(after TIMEOUT TMO-ACTION)])</syntax>

Match incoming messages against {{PAT ...}}.

Each pattern must be a valid pattern for '''[[/egg/matchable|match]]'''.

Optionally, do {{tmo-action}} after {{timeout}}.

'''This version of {{recv}} is incompatible with the one defined in
the Termite paper and implementation as it uses the syntax of the
[[matchable]] egg.'''

== Examples

=== Making the REPL process a hardwood process

Inside csi:
<enscript highlight="scheme">
(setup-thread (current-process))
</enscript>

This can be useful to communicate with other processes from the REPL, as
in the following examples.

=== Making a "server" process

<enscript highlight="scheme">
(define pong-server
  (spawn
    (lambda ()
      (let loop ()
        (recv
          (((? pid? pid) 'ping)  (! pid 'pong)
                                 (loop))
          (else  (loop))))

(! pong-server (list (self) 'ping))

(?)                 --> pong
</enscript>

=== Selective message retrieval

<enscript highlight="scheme">
(! (self) 1)
(! (self) 2)
(! (self) 3)

(?)                 --> 1
(?? odd?)           --> 3
(?)                 --> 2
</enscript>

=== RPC service

<enscript highlight="scheme">
(define rpc-server
  (spawn
    (lambda ()
      (let loop ()
        (recv
          ((from tag ('add a b))
           (! from (list tag (+ a b)))))
        (loop)))))

(!? rpc-server '(add 21 21))      ---> 42
</enscript>

== Version History

; 0.1 : Initial release

== License

 Copyright (c) 2014, Adrien Ramos <kooda@upyum.com>
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are
 met:
 
 1. Redistributions of source code must retain the above copyright
 notice, this list of conditions and the following disclaimer.
 
 2. Redistributions in binary form must reproduce the above copyright
 notice, this list of conditions and the following disclaimer in the
 documentation and/or other materials provided with the distribution.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
